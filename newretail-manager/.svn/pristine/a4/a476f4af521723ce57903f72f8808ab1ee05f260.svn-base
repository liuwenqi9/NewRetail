<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.newretail.mapper.custom.GoodsCustomMapper" >
 	
  	  <resultMap id="BaseResultMap" type="com.newretail.pojo.custom.GoodsTableCustom" >
		    <id column="goodsId" property="goodsId" jdbcType="INTEGER" />
		    <result column="goodsName" property="goodsName" jdbcType="VARCHAR" />
		    <result column="goodsPhoto" property="goodsPhoto" jdbcType="VARCHAR" />
		    <result column="goodsPrice" property="goodsPrice" jdbcType="VARCHAR" />
		    <result column="discount" property="discount" jdbcType="VARCHAR" />
		    <result column="goodsType" property="goodsType" jdbcType="VARCHAR" />
		    <result column="create_time" property="createTime" jdbcType="VARCHAR" />
		    <result column="update_time" property="updateTime" jdbcType="VARCHAR" />
		    <result column="stock" property="stock" jdbcType="INTEGER" />
		    <result column="goodsStatus" property="goodsStatus" jdbcType="VARCHAR" />
		    <result column="userId" property="userId" jdbcType="VARCHAR" />
		    <result column="sales" property="sales" jdbcType="VARCHAR" />
	  </resultMap>
		<!-- 根据用户id查询用户下所有商品-->
		<select id="findGoodsByCustom" parameterType="java.lang.String" resultMap="BaseResultMap">
		 	SELECT goods_table.goods_id "goodsId",goods_name "goodsName",goods_photo "goodsPhoto",
			goods_price "goodsPrice",discount,stock "stock",goods_status "goodsStatus",
			goods_type "goodsType",create_time,update_time,user_id "userId",sales "sales"
			FROM goods_table,goods_sales
			WHERE goods_table.goods_id = goods_sales.`goods_id` AND user_id = #{id}
		 </select> 
		 <!-- 按更新时间来排序-->
		<select id="findGoodsByCustomOrderByLastTime" parameterType="com.newretail.pojo.custom.GoodsTableCustom" resultMap="BaseResultMap">
		 	SELECT goods_table.goods_id "goodsId",goods_name "goodsName",goods_photo "goodsPhoto",
			goods_price "goodsPrice",discount,stock "stock",goods_status "goodsStatus",
			goods_type "goodsType",create_time,update_time,user_id "userId",sales "sales"
			FROM goods_table,goods_sales
			WHERE goods_table.goods_id = goods_sales.`goods_id` AND user_id = #{userId}
			<if test="goodsName != null" >
		       AND goods_name LIKE  CONCAT(CONCAT('%', #{goodsName}), '%')
		    </if>
			ORDER BY update_time DESC
		 </select> 
	    <!-- 按照销量来排序-->
		<select id="findGoodsByCustomOrderBySales" parameterType="com.newretail.pojo.custom.GoodsTableCustom" resultMap="BaseResultMap">
		 	SELECT goods_table.goods_id "goodsId",goods_name "goodsName",goods_photo "goodsPhoto",
			goods_price "goodsPrice",discount,stock "stock",goods_status "goodsStatus",
			goods_type "goodsType",create_time,update_time,user_id "userId",sales "sales"
			FROM goods_table,goods_sales
			WHERE goods_table.goods_id = goods_sales.`goods_id` AND user_id = #{userId}
			<if test="goodsName != null" >
		       AND goods_name LIKE  CONCAT(CONCAT('%', #{goodsName}), '%')
		    </if>
			ORDER BY sales DESC
		 </select>
	<!-- 多条件查询-->
	<select id="findGoodsByCustomOrderByAdmin" parameterType="com.newretail.pojo.custom.GoodsTableCustom" resultMap="BaseResultMap">
		SELECT goods_table.goods_id "goodsId",goods_name "goodsName",goods_photo "goodsPhoto",
		goods_price "goodsPrice",discount,stock "stock",goods_status "goodsStatus",
		goods_type "goodsType",create_time,update_time,goods_table.user_id "userId",sales "sales"
		FROM goods_table,goods_sales,user_address_table
		WHERE goods_table.goods_id = goods_sales.`goods_id` and goods_table.user_id = user_address_table.user_id
		<if test="areaCode != null" >
			AND area_code LIKE  CONCAT(CONCAT('%', #{areaCode}), '%')
		</if>
		<if test="userId != null" >
			AND userId = #{userId}
		</if>
		<if test="goodsId != null" >
			AND goods_table.goods_id = #{goodsId}
		</if>
		<if test="goodsStatus != null" >
			AND goods_status = #{goodsStatus}
		</if>
		<if test="deliverAddress != null" >
			AND deliver_address LIKE  CONCAT(CONCAT('%', #{deliverAddress}), '%')
		</if>
		ORDER BY update_time ASC
	</select>

</mapper>