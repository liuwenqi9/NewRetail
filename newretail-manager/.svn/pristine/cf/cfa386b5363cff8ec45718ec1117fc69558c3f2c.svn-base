package com.newretail.controller;


import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.fasterxml.jackson.databind.annotation.JsonTypeIdResolver;
import com.github.pagehelper.StringUtil;
import com.newretail.common.utils.CookieUtils;
import com.newretail.common.utils.JqGridResult;
import com.newretail.common.utils.NewRetailResult;
import com.newretail.pojo.UserTable;
import com.newretail.service.IOrderManageService;
import com.newretail.service.UserService;


@Controller
@RequestMapping("/order")
public class OrderManageController {
	
	@Autowired
	private IOrderManageService orderManageService;
	
	@Autowired
	private UserService userService;
	
	@RequestMapping("/toIndex")	
	public String toIndex(HttpServletRequest req){
		/*String token = CookieUtils.getCookieValue(req, "NEWRETAIL_LOGIN");
		UserTable userByToken = null;
		try {
			userByToken = userService.getUserByToken(token);
		} catch (Exception e1) {
			e1.printStackTrace();
		}*/
		//model.addAttribute("userIdentify", 2);
		//req.setAttribute("userIdentify", 2);
		req.setAttribute("userIdentify", 2);
		return "forward:/order";//转发页面，重定向用redirect,forward:
	}
	
	@RequestMapping("/getOrderList")
	@ResponseBody
	public JqGridResult getOrderList(HttpServletRequest req,HttpServletResponse res){
		
		/*String token = CookieUtils.getCookieValue(req, "NEWRETAIL_LOGIN");
		UserTable userByToken = null;
		try {
			userByToken = userService.getUserByToken(token);
		} catch (Exception e1) {
			e1.printStackTrace();
		}	*/	
		Map<String,Object> params = new HashMap<>();
		/*if(userByToken.getIdentify().equals("2")){
			params.put("merchantId", userByToken.getId());
		}*/
		params.put("orderTime", req.getParameter("orderTime"));
		params.put("orderCode", req.getParameter("orderCode"));
		params.put("orderStatus", req.getParameter("orderStatus"));
		params.put("deliverStatus", req.getParameter("deliverStatus"));
		params.put("deliverType", req.getParameter("deliverType"));
		
		int rows = Integer.parseInt(req.getParameter("rows"));//这个是每页要显示的行数
		int page = Integer.parseInt(req.getParameter("page"));//显示的第几页
		params.put("rows", rows);
		params.put("page", page);
		return orderManageService.getOrderList(params);
	}
	
	@RequestMapping("/getGoodsList")
	@ResponseBody
	public NewRetailResult getGoodsList(HttpServletRequest req,HttpServletResponse res){
		
		String orderCode = req.getParameter("orderCode");
		if(StringUtils.isEmpty(orderCode)){
			return new NewRetailResult(NewRetailResult.RESULT_FAILED, "订单号不能为空", null);
		}	
		return orderManageService.getGoodsByOrderCode(orderCode);
	}
	
	@RequestMapping("/updateOrderStatus")
	@ResponseBody
	public NewRetailResult updateOrderStatus(HttpServletRequest req,HttpServletResponse res){
		
		String orderCode = req.getParameter("orderCode");
		if(StringUtils.isEmpty(orderCode)){
			return new NewRetailResult(NewRetailResult.RESULT_FAILED, "订单号不能为空", null);
		}	
		return orderManageService.updateOrderStatus(orderCode, "1");
	}
	

}
